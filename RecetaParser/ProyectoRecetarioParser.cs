//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\Belkis Vasquez\source\repos\RecetaParser\RecetaParser\ProyectoRecetario.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class ProyectoRecetarioParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, REC_LBL=2, POR_LBL=3, TIEMP_PREP_LBL=4, TIEMP_COC_LBL=5, CAL_LBL=6, 
		INGR_LBL=7, ELAB_LBL=8, SEP=9, SP=10, COMA=11, PAR=12, NUM=13, TEXT=14, 
		WORD=15, GUION=16, NEWLINE=17;
	public const int
		RULE_program = 0, RULE_receta = 1, RULE_informacion = 2, RULE_nombre = 3, 
		RULE_porciones = 4, RULE_tiempoPreparacion = 5, RULE_tiempoCoccion = 6, 
		RULE_calorias = 7, RULE_ingredientes = 8, RULE_det_ingredientes = 9, RULE_elaboracion = 10, 
		RULE_det_elaboracion = 11;
	public static readonly string[] ruleNames = {
		"program", "receta", "informacion", "nombre", "porciones", "tiempoPreparacion", 
		"tiempoCoccion", "calorias", "ingredientes", "det_ingredientes", "elaboracion", 
		"det_elaboracion"
	};

	private static readonly string[] _LiteralNames = {
		null, "' '", "'RECETA'", "'PORCIONES'", "'TIEMPO PREPARACION'", "'TIEMPO COCCION'", 
		"'CALORIAS'", "'INGREDIENTES'", "'ELABORACION'", null, null, "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "REC_LBL", "POR_LBL", "TIEMP_PREP_LBL", "TIEMP_COC_LBL", "CAL_LBL", 
		"INGR_LBL", "ELAB_LBL", "SEP", "SP", "COMA", "PAR", "NUM", "TEXT", "WORD", 
		"GUION", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ProyectoRecetario.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ProyectoRecetarioParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ProyectoRecetarioParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ProyectoRecetarioParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(ProyectoRecetarioParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RecetaContext[] receta() {
			return GetRuleContexts<RecetaContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RecetaContext receta(int i) {
			return GetRuleContext<RecetaContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 25;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 24;
				receta();
				}
				}
				State = 27;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==GUION );
			State = 29;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RecetaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NombreContext nombre() {
			return GetRuleContext<NombreContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InformacionContext[] informacion() {
			return GetRuleContexts<InformacionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InformacionContext informacion(int i) {
			return GetRuleContext<InformacionContext>(i);
		}
		public RecetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_receta; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReceta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RecetaContext receta() {
		RecetaContext _localctx = new RecetaContext(Context, State);
		EnterRule(_localctx, 2, RULE_receta);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			nombre();
			State = 33;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 32;
					informacion();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 35;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InformacionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PorcionesContext porciones() {
			return GetRuleContext<PorcionesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaloriasContext calorias() {
			return GetRuleContext<CaloriasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IngredientesContext ingredientes() {
			return GetRuleContext<IngredientesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElaboracionContext elaboracion() {
			return GetRuleContext<ElaboracionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiempoPreparacionContext tiempoPreparacion() {
			return GetRuleContext<TiempoPreparacionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TiempoCoccionContext tiempoCoccion() {
			return GetRuleContext<TiempoCoccionContext>(0);
		}
		public InformacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_informacion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInformacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InformacionContext informacion() {
		InformacionContext _localctx = new InformacionContext(Context, State);
		EnterRule(_localctx, 4, RULE_informacion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 37;
			porciones();
			State = 39;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				{
				State = 38;
				tiempoPreparacion();
				}
				break;
			}
			State = 42;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 41;
				tiempoCoccion();
				}
				break;
			}
			State = 44;
			calorias();
			State = 45;
			ingredientes();
			State = 46;
			elaboracion();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NombreContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(ProyectoRecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REC_LBL() { return GetToken(ProyectoRecetarioParser.REC_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoRecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoRecetarioParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ProyectoRecetarioParser.SP, 0); }
		public NombreContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nombre; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNombre(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NombreContext nombre() {
		NombreContext _localctx = new NombreContext(Context, State);
		EnterRule(_localctx, 6, RULE_nombre);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48;
			Match(GUION);
			State = 49;
			Match(REC_LBL);
			State = 50;
			Match(SEP);
			State = 51;
			Match(TEXT);
			State = 53;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 52;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PorcionesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(ProyectoRecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POR_LBL() { return GetToken(ProyectoRecetarioParser.POR_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoRecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(ProyectoRecetarioParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoRecetarioParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ProyectoRecetarioParser.SP, 0); }
		public PorcionesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_porciones; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPorciones(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PorcionesContext porciones() {
		PorcionesContext _localctx = new PorcionesContext(Context, State);
		EnterRule(_localctx, 8, RULE_porciones);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			Match(GUION);
			State = 56;
			Match(POR_LBL);
			State = 57;
			Match(SEP);
			State = 58;
			Match(NUM);
			State = 59;
			Match(TEXT);
			State = 61;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 60;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TiempoPreparacionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(ProyectoRecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIEMP_PREP_LBL() { return GetToken(ProyectoRecetarioParser.TIEMP_PREP_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoRecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(ProyectoRecetarioParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoRecetarioParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ProyectoRecetarioParser.SP, 0); }
		public TiempoPreparacionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tiempoPreparacion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTiempoPreparacion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TiempoPreparacionContext tiempoPreparacion() {
		TiempoPreparacionContext _localctx = new TiempoPreparacionContext(Context, State);
		EnterRule(_localctx, 10, RULE_tiempoPreparacion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(GUION);
			State = 64;
			Match(TIEMP_PREP_LBL);
			State = 65;
			Match(SEP);
			State = 66;
			Match(NUM);
			State = 67;
			Match(TEXT);
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 68;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TiempoCoccionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(ProyectoRecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIEMP_COC_LBL() { return GetToken(ProyectoRecetarioParser.TIEMP_COC_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoRecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(ProyectoRecetarioParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoRecetarioParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ProyectoRecetarioParser.SP, 0); }
		public TiempoCoccionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tiempoCoccion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTiempoCoccion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TiempoCoccionContext tiempoCoccion() {
		TiempoCoccionContext _localctx = new TiempoCoccionContext(Context, State);
		EnterRule(_localctx, 12, RULE_tiempoCoccion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			Match(GUION);
			State = 72;
			Match(TIEMP_COC_LBL);
			State = 73;
			Match(SEP);
			State = 74;
			Match(NUM);
			State = 75;
			Match(TEXT);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 76;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaloriasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(ProyectoRecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAL_LBL() { return GetToken(ProyectoRecetarioParser.CAL_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoRecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(ProyectoRecetarioParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoRecetarioParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SP() { return GetToken(ProyectoRecetarioParser.SP, 0); }
		public CaloriasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_calorias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCalorias(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CaloriasContext calorias() {
		CaloriasContext _localctx = new CaloriasContext(Context, State);
		EnterRule(_localctx, 14, RULE_calorias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			Match(GUION);
			State = 80;
			Match(CAL_LBL);
			State = 81;
			Match(SEP);
			State = 82;
			Match(NUM);
			State = 83;
			Match(TEXT);
			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SP) {
				{
				State = 84;
				Match(SP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IngredientesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INGR_LBL() { return GetToken(ProyectoRecetarioParser.INGR_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoRecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(ProyectoRecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Det_ingredientesContext[] det_ingredientes() {
			return GetRuleContexts<Det_ingredientesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Det_ingredientesContext det_ingredientes(int i) {
			return GetRuleContext<Det_ingredientesContext>(i);
		}
		public IngredientesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ingredientes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIngredientes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IngredientesContext ingredientes() {
		IngredientesContext _localctx = new IngredientesContext(Context, State);
		EnterRule(_localctx, 16, RULE_ingredientes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 88;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GUION) {
				{
				State = 87;
				Match(GUION);
				}
			}

			State = 90;
			Match(INGR_LBL);
			State = 91;
			Match(SEP);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 92;
				det_ingredientes();
				}
				}
				State = 95;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__0 || _la==NUM );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Det_ingredientesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(ProyectoRecetarioParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoRecetarioParser.TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMA() { return GetToken(ProyectoRecetarioParser.COMA, 0); }
		public Det_ingredientesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_det_ingredientes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDet_ingredientes(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Det_ingredientesContext det_ingredientes() {
		Det_ingredientesContext _localctx = new Det_ingredientesContext(Context, State);
		EnterRule(_localctx, 18, RULE_det_ingredientes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 97;
				Match(T__0);
				}
				}
				State = 102;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 103;
			Match(NUM);
			State = 104;
			Match(TEXT);
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMA) {
				{
				State = 105;
				Match(COMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaboracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GUION() { return GetToken(ProyectoRecetarioParser.GUION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELAB_LBL() { return GetToken(ProyectoRecetarioParser.ELAB_LBL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEP() { return GetToken(ProyectoRecetarioParser.SEP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Det_elaboracionContext[] det_elaboracion() {
			return GetRuleContexts<Det_elaboracionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Det_elaboracionContext det_elaboracion(int i) {
			return GetRuleContext<Det_elaboracionContext>(i);
		}
		public ElaboracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElaboracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElaboracionContext elaboracion() {
		ElaboracionContext _localctx = new ElaboracionContext(Context, State);
		EnterRule(_localctx, 20, RULE_elaboracion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			Match(GUION);
			State = 109;
			Match(ELAB_LBL);
			State = 110;
			Match(SEP);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 111;
				det_elaboracion();
				}
				}
				State = 114;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NUM );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Det_elaboracionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUM() { return GetToken(ProyectoRecetarioParser.NUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAR() { return GetToken(ProyectoRecetarioParser.PAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(ProyectoRecetarioParser.TEXT, 0); }
		public Det_elaboracionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_det_elaboracion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IProyectoRecetarioVisitor<TResult> typedVisitor = visitor as IProyectoRecetarioVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDet_elaboracion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Det_elaboracionContext det_elaboracion() {
		Det_elaboracionContext _localctx = new Det_elaboracionContext(Context, State);
		EnterRule(_localctx, 22, RULE_det_elaboracion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			Match(NUM);
			State = 117;
			Match(PAR);
			State = 118;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', '{', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x3', '\x2', '\x6', 
		'\x2', '\x1C', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x1D', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x6', '\x3', '$', '\n', 
		'\x3', '\r', '\x3', '\xE', '\x3', '%', '\x3', '\x4', '\x3', '\x4', '\x5', 
		'\x4', '*', '\n', '\x4', '\x3', '\x4', '\x5', '\x4', '-', '\n', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x38', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '@', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x5', '\a', 'H', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'P', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', 'X', '\n', '\t', '\x3', '\n', '\x5', '\n', '[', '\n', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x6', '\n', '`', '\n', '\n', '\r', '\n', 
		'\xE', '\n', '\x61', '\x3', '\v', '\a', '\v', '\x65', '\n', '\v', '\f', 
		'\v', '\xE', '\v', 'h', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x5', '\v', 'm', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x6', '\f', 's', '\n', '\f', '\r', '\f', '\xE', '\f', 't', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x2', '\x2', 
		'\xE', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x2', '\x2', '\x2', '|', '\x2', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '!', '\x3', '\x2', '\x2', '\x2', '\x6', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\b', '\x32', '\x3', '\x2', '\x2', '\x2', '\n', '\x39', 
		'\x3', '\x2', '\x2', '\x2', '\f', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\xE', 'I', '\x3', '\x2', '\x2', '\x2', '\x10', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x12', 'Z', '\x3', '\x2', '\x2', '\x2', '\x14', '\x66', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 'n', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'v', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x1C', '\x5', '\x4', '\x3', 
		'\x2', '\x1B', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x1D', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1D', 
		'\x1E', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '\x1F', ' ', '\a', '\x2', '\x2', '\x3', ' ', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '!', '#', '\x5', '\b', '\x5', '\x2', '\"', '$', '\x5', '\x6', 
		'\x4', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '$', '%', '\x3', 
		'\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', 
		'\x2', '\x2', '\x2', '&', '\x5', '\x3', '\x2', '\x2', '\x2', '\'', ')', 
		'\x5', '\n', '\x6', '\x2', '(', '*', '\x5', '\f', '\a', '\x2', ')', '(', 
		'\x3', '\x2', '\x2', '\x2', ')', '*', '\x3', '\x2', '\x2', '\x2', '*', 
		',', '\x3', '\x2', '\x2', '\x2', '+', '-', '\x5', '\xE', '\b', '\x2', 
		',', '+', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', '\x2', '\x2', '\x2', 
		'-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\x5', '\x10', '\t', '\x2', 
		'/', '\x30', '\x5', '\x12', '\n', '\x2', '\x30', '\x31', '\x5', '\x16', 
		'\f', '\x2', '\x31', '\a', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\x12', '\x2', '\x2', '\x33', '\x34', '\a', '\x4', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\v', '\x2', '\x2', '\x35', '\x37', '\a', '\x10', 
		'\x2', '\x2', '\x36', '\x38', '\a', '\f', '\x2', '\x2', '\x37', '\x36', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\x38', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\t', '\x3', '\x2', '\x2', '\x2', '\x39', ':', '\a', '\x12', '\x2', 
		'\x2', ':', ';', '\a', '\x5', '\x2', '\x2', ';', '<', '\a', '\v', '\x2', 
		'\x2', '<', '=', '\a', '\xF', '\x2', '\x2', '=', '?', '\a', '\x10', '\x2', 
		'\x2', '>', '@', '\a', '\f', '\x2', '\x2', '?', '>', '\x3', '\x2', '\x2', 
		'\x2', '?', '@', '\x3', '\x2', '\x2', '\x2', '@', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x42', '\a', '\x12', '\x2', '\x2', '\x42', '\x43', 
		'\a', '\x6', '\x2', '\x2', '\x43', '\x44', '\a', '\v', '\x2', '\x2', '\x44', 
		'\x45', '\a', '\xF', '\x2', '\x2', '\x45', 'G', '\a', '\x10', '\x2', '\x2', 
		'\x46', 'H', '\a', '\f', '\x2', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', 
		'\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', '\r', '\x3', '\x2', 
		'\x2', '\x2', 'I', 'J', '\a', '\x12', '\x2', '\x2', 'J', 'K', '\a', '\a', 
		'\x2', '\x2', 'K', 'L', '\a', '\v', '\x2', '\x2', 'L', 'M', '\a', '\xF', 
		'\x2', '\x2', 'M', 'O', '\a', '\x10', '\x2', '\x2', 'N', 'P', '\a', '\f', 
		'\x2', '\x2', 'O', 'N', '\x3', '\x2', '\x2', '\x2', 'O', 'P', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\xF', '\x3', '\x2', '\x2', '\x2', 'Q', 'R', '\a', 
		'\x12', '\x2', '\x2', 'R', 'S', '\a', '\b', '\x2', '\x2', 'S', 'T', '\a', 
		'\v', '\x2', '\x2', 'T', 'U', '\a', '\xF', '\x2', '\x2', 'U', 'W', '\a', 
		'\x10', '\x2', '\x2', 'V', 'X', '\a', '\f', '\x2', '\x2', 'W', 'V', '\x3', 
		'\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', '\x2', '\x2', 'X', '\x11', 
		'\x3', '\x2', '\x2', '\x2', 'Y', '[', '\a', '\x12', '\x2', '\x2', 'Z', 
		'Y', '\x3', '\x2', '\x2', '\x2', 'Z', '[', '\x3', '\x2', '\x2', '\x2', 
		'[', '\\', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\a', '\t', '\x2', '\x2', 
		']', '_', '\a', '\v', '\x2', '\x2', '^', '`', '\x5', '\x14', '\v', '\x2', 
		'_', '^', '\x3', '\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '\x13', '\x3', '\x2', '\x2', '\x2', '\x63', 
		'\x65', '\a', '\x3', '\x2', '\x2', '\x64', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x65', 'h', '\x3', '\x2', '\x2', '\x2', '\x66', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x66', '\x3', '\x2', '\x2', '\x2', 'i', 
		'j', '\a', '\xF', '\x2', '\x2', 'j', 'l', '\a', '\x10', '\x2', '\x2', 
		'k', 'm', '\a', '\r', '\x2', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'n', 'o', '\a', '\x12', '\x2', '\x2', 'o', 'p', '\a', '\n', '\x2', 
		'\x2', 'p', 'r', '\a', '\v', '\x2', '\x2', 'q', 's', '\x5', '\x18', '\r', 
		'\x2', 'r', 'q', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x3', '\x2', '\x2', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'u', '\x17', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\xF', 
		'\x2', '\x2', 'w', 'x', '\a', '\xE', '\x2', '\x2', 'x', 'y', '\a', '\x10', 
		'\x2', '\x2', 'y', '\x19', '\x3', '\x2', '\x2', '\x2', '\x10', '\x1D', 
		'%', ')', ',', '\x37', '?', 'G', 'O', 'W', 'Z', '\x61', '\x66', 'l', 't',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
